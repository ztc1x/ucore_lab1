#Lab1实验报告
计22，张天成，2012011267

<br>
##练习1

###练习1.1

bin/ucore.img

阅读Makefile文件，可发现生成ucore.img的相关代码为

	$(UCOREIMG): $(kernel) $(bootblock)
	$(V)dd if=/dev/zero of=$@ count=10000
	$(V)dd if=$(bootblock) of=$@ conv=notrunc
	$(V)dd if=$(kernel) of=$@ seek=1 conv=notrunc

故生成ucore.img首先需要生成bootblock、kernel。

生成bin/bootblock的相关代码为

	$(bootblock): $(call toobj,$(bootfiles))   $(call totarget,sign)
	@echo + ld $@
	$(V)$(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 $^ \		-o $(call toobj,bootblock)
	@$(OBJDUMP) -S $(call objfile,bootblock) > \
		$(call asmfile,bootblock)
	@$(OBJCOPY) -S -O binary $(call objfile,bootblock) \
		$(call outfile,bootblock)
	@$(call totarget,sign) $(call outfile,bootblock) $(bootblock)

则生成bootblock首先需要生成bootasm.o、bootmain.o、sign。
 	 
生成bootasm.o,bootmain.o的相关代码为

	bootfiles = $(call listf_cc,boot) 
	$(foreach f,$(bootfiles),$(call cc_compile,$(f),$(CC),\
	$(CFLAGS) -Os -nostdinc))
 	 	  
实际代码由宏批量生成，通过“make "V="”可查看使用的参数。
 	 	  
生成bootasm.o需要bootasm.S，使用“make "V="”查看到的命令为
 	 	  
	gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs \
	-nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc \
	-c boot/bootasm.S -o obj/boot/bootasm.o
 	 	  
生成bootmain.o需要bootmain.c，使用的命令为

	gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc \
	-fno-stack-protector -Ilibs/ -Os -nostdinc \
	-c boot/bootmain.c -o obj/boot/bootmain.o
 	
生成这些文件的关键参数包括
 	 
	-ggdb		生成可供gdb使用的调试信息
	-m32		生成适用于32位环境的代码
	-gstabs		生成stabs格式的调试信息
	-nostdinc	不使用标准库
	-fno-stack-protector  不生成用于检测缓冲区溢出的代码
	-Os			优化减小代码大小
	-I<dir>		添加搜索头文件的路径
	-fno-builtin  除非用__builtin_前缀，否则不进行builtin函数的优化
 	 
生成sign的代码为
	
	$(call add_files_host,tools/sign.c,sign,sign)
	$(call create_target_host,sign,sign)
 	 	  
实际使用的命令为
 	 	 
	gcc -Itools/ -g -Wall -O2 -c tools/sign.c \
		-o obj/sign/tools/sign.o
	gcc -g -Wall -O2 obj/sign/tools/sign.o -o bin/sign
 	 
首先生成bootblock.o
 	  
	ld -m    elf_i386 -nostdlib -N -e start -Ttext 0x7C00 \
		obj/boot/bootasm.o obj/boot/bootmain.o -o obj/bootblock.o

其中关键的参数为

	-m <emulation>  模拟i386上的连接器
	-nostdlib  不使用标准库
	-N  设置代码段和数据段均可读写
	-e <entry>  指定入口
	-Ttext  制定代码段开始位置
 	 
拷贝二进制代码bootblock.o到bootblock.out
 	  
	objcopy -S -O binary obj/bootblock.o obj/bootblock.out

其中关键的参数为

	-S  移除所有符号和重定位信息
	-O <bfdname>  指定输出格式
 	 
使用sign工具处理bootblock.out，生成bootblock

	bin/sign obj/bootblock.out bin/bootblock
 
生成bin/kernel的相关代码为
 	
	$(kernel): tools/kernel.ld
	$(kernel): $(KOBJS)
	@echo + ld $@
	$(V)$(LD) $(LDFLAGS) -T tools/kernel.ld -o $@ $(KOBJS)
	@$(OBJDUMP) -S $@ > $(call asmfile,kernel)
	@$(OBJDUMP) -t $@   $(SED) '1,/SYMBOL TABLE/d; s/ .* / /; \
		/^$$/d' > $(call symfile,kernel)
 	  
故生成kernel需要 kernel.ld、init.o、readline.o、stdio.o、kdebug.o、kmonitor.o、panic.o、clock.o、console.o、intr.o、picirq.o、trap.o、trapentry.o、vectors.o、pmm.o、printfmt.o、string.o，其中kernel.ld已存在。

生成这些.o文件的相关代码为

	$(call add_files_cc,$(call listf_cc,$(KSRCDIR)),kernel,\
		$(KCFLAGS))
 	 	  
这些.o文件的生成方式与参数类似，仅举init.o为例，实际命令为

	gcc -Ikern/init/ -fno-builtin -Wall -ggdb -m32 \
		-gstabs -nostdinc  -fno-stack-protector \
		-Ilibs/ -Ikern/debug/ -Ikern/driver/ \
		-Ikern/trap/ -Ikern/mm/ -c kern/init/init.c \
		-o obj/kern/init/init.o
 	  
生成kernel时必需的命令只有
	
	ld -m    elf_i386 -nostdlib -T tools/kernel.ld -o bin/kernel \
		obj/kern/init/init.o obj/kern/libs/readline.o \
		obj/kern/libs/stdio.o obj/kern/debug/kdebug.o \
		obj/kern/debug/kmonitor.o obj/kern/debug/panic.o \
		obj/kern/driver/clock.o obj/kern/driver/console.o \
		obj/kern/driver/intr.o obj/kern/driver/picirq.o \
		obj/kern/trap/trap.o obj/kern/trap/trapentry.o \
		obj/kern/trap/vectors.o obj/kern/mm/pmm.o \
		obj/libs/printfmt.o obj/libs/string.o

其中新出现的关键参数为
	
	-T <scriptfile>  让连接器使用指定的脚本
 
最终生成ucore.img时，首先生成一个有10000个块的文件，每个块默认512字节，用0填充

	dd if=/dev/zero of=bin/ucore.img count=10000
 
然后把bootblock中的内容写到第一个块

	dd if=bin/bootblock of=bin/ucore.img conv=notrunc
 
再从第二个块开始写kernel中的内容
	
	dd if=bin/kernel of=bin/ucore.img seek=1 conv=notrunc

至此，ucore.img的生成完成。


###练习1.2

由sign.c的代码可见，一个硬盘的主引导扇区大小为512字节，且第510个字节是0x55，第511个字节是0xAA。

<br>
##练习2

###练习2.1

通过改写Makefile文件

	debug: $(UCOREIMG)
		$(V)$(TERMINAL) -e "$(QEMU) -S -s -d in_asm -D $(BINDIR)/q.log -parallel stdio -hda $< -serial null"
		$(V)sleep 2
		$(V)$(TERMINAL) -e "gdb -q -tui -x tools/gdbinit"
		
以在调用qemu时增加-d in_asm -D q.log参数可以将运行的汇编指令保存在q.log中。

为防止qemu在gdb连接后立即开始执行，删除了tools/gdbinit中的"continue"行。

###练习2.2

在tools/gdbinit末尾加上

    set architecture i8086	//设置当前调试的CPU是8086
	b *0x7c00  				//在0x7c00处设置断点。此地址是bootloader入口点地址，可查看看boot/bootasm.S的start地址处的代码
	c          				//继续执行
	x /2i $pc  				//显示当前eip处的汇编指令
	set architecture i386  //设置当前调试的CPU是80386
	
运行"make debug"便可得到

	Breakpoint 2, 0x00007c00 in ?? ()
	=> 0x7c00:      cli
	   0x7c01:      cld 
	   0x7c02:      xor    %eax,%eax
	   0x7c04:      mov    %eax,%ds
	   0x7c06:      mov    %eax,%es
	   0x7c08:      mov    %eax,%ss 
	   0x7c0a:      in     $0x64,%al
	   0x7c0c:      test   $0x2,%al
	   0x7c0e:      jne    0x7c0a
	   0x7c10:      mov    $0xd1,%al

###练习2.3

在tools/gdbinit结尾加上

	b *0x7c00
	c
	x /10i $pc

就可以在q.log中找到“call bootmain”前执行的命令：

	----------------
	IN: 
	0x00007c00:  cli    
	
	----------------
	IN: 
	0x00007c01:  cld    
	0x00007c02:  xor    %ax,%ax
	0x00007c04:  mov    %ax,%ds
	0x00007c06:  mov    %ax,%es
	0x00007c08:  mov    %ax,%ss
	
	----------------
	IN: 
	0x00007c0a:  in     $0x64,%al
	
	----------------
	IN: 
	0x00007c0c:  test   $0x2,%al
	0x00007c0e:  jne    0x7c0a
	
	----------------
	IN: 
	0x00007c10:  mov    $0xd1,%al
	0x00007c12:  out    %al,$0x64
	0x00007c14:  in     $0x64,%al
	0x00007c16:  test   $0x2,%al
	0x00007c18:  jne    0x7c14
	
	----------------
	IN: 
	0x00007c1a:  mov    $0xdf,%al
	0x00007c1c:  out    %al,$0x60
	0x00007c1e:  lgdtw  0x7c6c
	0x00007c23:  mov    %cr0,%eax
	0x00007c26:  or     $0x1,%eax
	0x00007c2a:  mov    %eax,%cr0
	
	----------------
	IN: 
	0x00007c2d:  ljmp   $0x8,$0x7c32
	
	----------------
	IN: 
	0x00007c32:  mov    $0x10,%ax
	0x00007c36:  mov    %eax,%ds
	
	----------------
	IN: 
	0x00007c38:  mov    %eax,%es
	
	----------------
	IN: 
	0x00007c3a:  mov    %eax,%fs
	0x00007c3c:  mov    %eax,%gs
	0x00007c3e:  mov    %eax,%ss
	
	----------------
	IN: 
	0x00007c40:  mov    $0x0,%ebp
	
	----------------
	IN: 
	0x00007c45:  mov    $0x7c00,%esp
	0x00007c4a:  call   0x7d0d
	
	----------------
	IN: 
	0x00007d0d:  push   %ebp
	
其与bootasm.S和bootblock.asm中的代码相同。

<br>
##练习3

bootasm.S从%cs=0，$pc=0x7c00进入后首清理环境，包括将flag置0和将段寄存器置0：

	.code16
	    cli
	    cld
	    xorw %ax, %ax
	    movw %ax, %ds
	    movw %ax, %es
	    movw %ax, %ss

然后开启A20：通过将键盘控制器上的A20线置于高电位，使得全部32条地址线可用，可以访问4G的内存空间：

	seta20.1:               # 等待8042键盘控制器不忙
	    inb $0x64, %al      # 
	    testb $0x2, %al     #
	    jnz seta20.1        #
	
	    movb $0xd1, %al     # 发送写8042输出端口的指令
	    outb %al, $0x64     #
	
	seta20.1:               # 等待8042键盘控制器不忙
	    inb $0x64, %al      # 
	    testb $0x2, %al     #
	    jnz seta20.1        #
	
	    movb $0xdf, %al     # 打开A20
	    outb %al, $0x60     # 

然后初始化GDT表：一个简单的GDT表和其描述符已经静态储存在引导区中，载入即可：

	lgdt gdtdesc

然后进入保护模式：将cr0寄存器的PE位置1开启保护模式：

	movl %cr0, %eax
	orl $CR0_PE_ON, %eax
	movl %eax, %cr0

通过长跳转更新cs的基地址：

	    ljmp $PROT_MODE_CSEG, $protcseg
	.code32
	protcseg:

再设置段寄存器并建立堆栈：

	movw $PROT_MODE_DSEG, %ax
	movw %ax, %ds
	movw %ax, %es
	movw %ax, %fs
	movw %ax, %gs
	movw %ax, %ss
	movl $0x0, %ebp
	movl $start, %esp

至此转到保护模式完成，进入boot主函数

	call bootmain

<br>
##练习4

首先看readsect函数，其作用是从设备的第secno扇区读取数据到dst位置：

	static void
	readsect(void *dst, uint32_t secno) {
	    waitdisk();
	
	    outb(0x1F2, 1);                         // 设置读取扇区的数目为1
	    outb(0x1F3, secno & 0xFF);
	    outb(0x1F4, (secno >> 8) & 0xFF);
	    outb(0x1F5, (secno >> 16) & 0xFF);
	    outb(0x1F6, ((secno >> 24) & 0xF)   0xE0);
	        // 上面四条指令联合制定了扇区号
	        // 在这4个字节线联合构成的32位参数中
	        //   29-31位强制设为1
	        //   28位(=0)表示访问"Disk 0"
	        //   0-27位是28位的偏移量
	    outb(0x1F7, 0x20);                      // 0x20命令，读取扇区
	
	    waitdisk();

	    insl(0x1F0, dst, SECTSIZE / 4);         // 读取到dst位置，
	                                            // 幻数4因为这里以DW为单位
	}

readseg简单包装了readsect，用于从设备读取任意长度的内容：

	static void
	readseg(uintptr_t va, uint32_t count, uint32_t offset) {
	    uintptr_t end_va = va + count;
	
	    va -= offset % SECTSIZE;
	
	    uint32_t secno = (offset / SECTSIZE) + 1; 
	    // 加1因为0扇区被引导占用
	    // ELF文件从1扇区开始
	
	    for (; va < end_va; va += SECTSIZE, secno ++) {
	        readsect((void *)va, secno);
	    }
	}


在bootmain函数中，加载OS的过程已由注释较清晰地说明：

	void
	bootmain(void) {
	    // 首先读取ELF的头部
	    readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);
	
	    // 通过储存在头部的幻数判断是否是合法的ELF文件
	    if (ELFHDR->e_magic != ELF_MAGIC) {
	        goto bad;
	    }
	
	    struct proghdr *ph, *eph;
	
	    // ELF头部有描述ELF文件应加载到内存什么位置的描述表，
	    // 先将描述表的头地址存在ph
	    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
	    eph = ph + ELFHDR->e_phnum;
	
	    // 按照描述表将ELF文件中数据载入内存
	    for (; ph < eph; ph ++) {
	        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
	    }
	    // ELF文件0x1000位置后面的0xd1ec比特被载入内存0x00100000
	    // ELF文件0xf000位置后面的0x1d20比特被载入内存0x0010e000

	    // 根据ELF头部储存的入口信息，找到内核的入口
	    ((void (*)(void))(ELFHDR->e_entry & 0xFFFFFF))();
	
	bad:
	    outw(0x8A00, 0x8A00);
	    outw(0x8A00, 0x8E00);
	    while (1);
	}

<br>
##练习5

函数的实现思路大致为：

1. 使用read_ebp()和read_eip()获取当前的ebp和eip的值；
2. 若ebp值不为0，打印出ebp和eip的值，位于ebp+8、ebp+12、ebp+16、ebp+20的4个参数，并调用print_debuginfo来输出更详细的调试信息；
3. 当前ebp指向内存单元的值是调用栈的上一栈帧的ebp值，ebp+4指向的内存单元是上一栈帧调用时应返回到的eip的值，由这些信息，转至2。

最后一行的输出为
	
	ebp:0x00007bf8 eip:0x00007d68 args:0xc031fcfa 0xc08ed88e 0x64e4d08e 0xfa7502a8 
    <unknow>: -- 0x00007d64 --

其对应的是第一个使用堆栈的函数，即bootmain.c中的bootmain。bootloader设置的堆栈从0x7c00开始，使用“call bootmain”转入bootmain函数，call指令将ebp压栈，故bootmain中ebp为0x7bf8。

<br>
##练习6

###练习6.1

中断向量表的一个表项占用8字节，其中2-3字节是段选择子，0-1字节和6-7字节拼成位移，两者联合便是中断处理程序的入口地址。

###练习6.2

见代码。idt_init函数借助SETGATE宏，用中断向量__vectors[]（来自vectors.S）填充IDT，完成了对中断描述符表的初始化后，用lidt函数实现了ucore OS对中断描述符的加载。

###练习6.3

见代码。对于时钟中断，每处理一次时钟中断，系统的时钟计数加1，每计100次调用print_ticks()输出文字“100 Ticks”。